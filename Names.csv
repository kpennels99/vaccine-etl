count|model|name|info|keep?
1436741|mail.message|Message| Override MailMessage class in order to add a new type: SMS messages.     Those messages comes with their own notification method, using SMS     gateway. |
833907|mail.followers|Document Followers| mail_followers holds the data related to the follow mechanism inside     Odoo. Partners can choose to follow documents (records) of any kind     that inherits from mail.thread. Following documents allow to receive     notifications for new messages. A subscription is characterized by:      :param: res_model: model of the followed objects     :param: res_id: ID of resource (may be 0 for every objects)     |
670545|mail.tracking.value|Mail Tracking Value| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
528762|ir.model.data|Model Data|Holds external identifier keys for records in the database.        This has two main uses:             * allows easy data integration with third-party systems,              making import/export/sync of data possible, as records              can be uniquely identified across multiple systems            * allows tracking the origin of data installed by Odoo              modules themselves, thus making it possible to later              update them seamlessly.     |
390235|account.move.line|Journal Item| Override AccountInvoice_line to add the link to the purchase order line it is related to|
292133|res.partner|Contact|     Inherited for VAT configuration in partner of Warehouse.     |
278717|report.stock.quantity|Stock Quantity Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
257133|ir.property|Company Property| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
227739|sale.order.line|Sales Order Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
224810|sale.report|Sales Analysis Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
218951|sapentia_shopware_importer.order_line_map|Shopware Order Lines Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
214587|report.all.channels.sales|Sales by Channel (All in One)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
172428|rules_engine.warehouse_import_line|Warehouse Import Log Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
162887|stock.move|Stock Move| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
159550|stock.report|Stock Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
135311|rules_engine.breakdown|Rules Engine Result Breakdowns| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
132794|sapentia_shopware_importer.address_map|Shopware Customer Address Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
119098|sale.order|Sales Order| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
113249|account.move|Journal Entries| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
109648|sapentia_shopware_importer.order_map|Shopware Order Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
87340|stock.valuation.layer|Stock Valuation Layer|Stock Valuation Layer|
86826|stock.move.line|Product Moves (Stock Move Line)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
83515|sapentia_shopware_importer.customer_map|Shopware Customer Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
78594|sapentia_shopware_importer.import_errors|Shopware Import Errors| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
68706|account.invoice.report|Invoices Statistics| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
67123|account.partial.reconcile|Partial Reconcile| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
63129|stock.picking|Transfer| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
54527|sapentia_shopware_importer.import_logs|Shopware Import Logs| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
51100|ir.translation|Translation| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
46670|mail.notification|Message Notifications| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
45110|account.full.reconcile|Full Reconcile| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
41571|helpdesk.sla.report.analysis|SLA Status Analysis| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
39383|procurement.group|Procurement Group|     The procurement group class is used to group products together     when computing procurements. (tasks, physical products, ...)      The goal is that when you have one sales order of several products     and the products are pulled from the same or several location(s), to keep     having the moves grouped into pickings that represent the sales order.      Used in: sales order (to group delivery order lines like the so), pull/push     rules (to pack like the delivery order), on orderpoints (e.g. for wave picking     all the similar products together).      Grouping is made only if the source and the destination is the same.     Suppose you have 4 lines on a picking from Output where 2 lines will need     to come from Input (crossdock) and 2 lines coming from Stock -> Output As     the four will have the same group ids from the SO, the move from input will     have a stock.picking with 2 grouped lines and the move from stock will have     2 grouped lines also.      The name is usually the name of the original document (sales order) or a     sequence computed if created manually.     |
36781|rules_engine.warehouse_export_line|Warehouse Export Log Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
36447|rules_engine.warehouse_export|Warehouse Export Log| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
36257|helpdesk.ticket|Helpdesk Ticket| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
35283|sapentia_shopware_importer.order_address_map|Shopware Order Address Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
28154|account.payment|Payments| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
25592|ir.logging|Logging| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
20142|x_legacy_deliveries|Legacy Deliveries| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17614|stock.inventory.line|Inventory Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17050|sapentia_shopware_importer.shopware_payment|Shopware Payments| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
16734|helpdesk.sla.status|Ticket SLA Status| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
16333|mrp.bom.line|Bill of Material Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
15722|ir.attachment|Attachment|Attachments are used to link binary files or url to any openerp document.      External attachment storage     ---------------------------      The computed field ``datas`` is implemented using ``_file_read``,     ``_file_write`` and ``_file_delete``, which can be overridden to implement     other storage engines. Such methods should check for other location pseudo     uri (example: hdfs://hadoopserver).      The default implementation is the file:dirname location that stores files     on the local filesystem using name based on their sha1 hash     |
15314|ir.model.fields|Fields| fields configuration for form builder |
11311|product.product|Product| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
11049|rules_engine.warehouse_import|Warehouse Import Log| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
10015|stock.quant|Quants| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
9664|rules_engine.errors|Rules Engine Error Records| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
9649|product.template|Product Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
9358|shipped.order.data.queue.line.ept|Shipped Order Data Queue Line Ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
9189|rules_engine.tariff_weights|Rules Engine cost-per-weight bands| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5903|mrp.bom|Bill of Material| Defines bills of material for a product or a product template |
4925|stock.quant.package|Packages| Packages containing quants and/or other packages |
4892|sapentia_shopware_importer.article_map|Shopware Product Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4669|common.log.book.ept|Common log book for all connector| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4338|stock.production.lot|Lot/Serial| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2986|account.analytic.line|Analytic Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2901|ir.ui.view|View| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
2689|account.bank.statement.line|Bank Statement Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2675|ir.model.fields.selection|Fields Selection| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2566|ir.model.constraint|Model Constraint|     This model tracks PostgreSQL foreign keys and constraints used by Odoo     models.     |
2303|product.template.attribute.value|Product Template Attribute Value|Materialized relationship between attribute values     and product template generated by the product.template.attribute.line|
2303|product.category|Product Category| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2263|sapentia_shopware_importer.category_map|Shopware Product Category Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1518|common.log.lines.ept|Common log line for all connector| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1467|hr.contract.employee.report|Contract and Employee Analysis Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1445|res.country.state|Country state| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1422|website.track|Visited Pages| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1395|ir.module.module.dependency|Module dependency| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1317|purchase.bill.union|Purchases & Bills Union| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1281|amazon.product.ept|Amazon Product Mapping with Odoo Products| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1263|purchase.order.line|Purchase Order Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1162|purchase.report|Purchase Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1124|ir.model.access|Model Access| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
1092|ir.actions.actions|Actions| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1092|ir.actions.act_window_close|Action Window Close| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1024|mail.mail|Outgoing Mails|Add the mass mailing campaign data to mail|
932|stock.valuation.adjustment.lines|Valuation Adjustment Lines| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
930|res.partner.bank|Bank Accounts| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
894|ir.exports.line|Exports Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
871|stock.inventory|Inventory| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
870|base_import.mapping|Base Import Mapping| mapping of previous column:field selections      This is useful when repeatedly importing from a third-party     system: column names generated by the external system may     not match Odoo's field names or labels. This model is used     to save the mapping between column names and fields so that     next time a user imports from the same third-party systems     we can automatically match the columns to the correct field     without them having to re-enter the mapping every single     time.     |
800|rules_engine.volume_bands|Rules Engine cost-per-volume bands| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
764|ir.actions.act_window|Action Window| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
740|ir.model|Models| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
704|ir.ui.menu|Menu| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
670|ir.module.module|Module| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
650|product.template.attribute.line|Product Template Attribute Line|Attributes available on product.template with their selected values in a m2m.     Used as a configuration model to generate the appropriate product.template.attribute.value|
580|website.visitor|Website Visitor| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
508|project.task|Task| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
494|report.project.task.user|Tasks Analysis| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
416|account.account|Account| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
351|mail.activity|Activity| An actual activity to perform. Activities are linked to     documents using res_id and res_model_id fields. Activities have a deadline     that can be used in kanban view to display a status. Once done activities     are unlinked and a message is posted. This message has a new activity_type_id     field that indicates the activity linked to the message. |
348|stock.rule|Stock Rule| A rule describe what a procurement should do; produce, buy, move, ... |
342|ir.sequence|Sequence| Sequence model.      The sequence model allows to define and use so-called sequence objects.     Such objects are used to generate unique identifiers in a transaction-safe     way.      |
332|stock.location|Inventory Locations| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
300|account.tax.repartition.line|Tax Repartition Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
283|delivery.carrier|Shipping Methods|         Amazon Delivery Code will set at time Update Order Status         Based on matching shipping service level category Carrier will set in Sales Order     |
272|ir.rule|Rule| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
257|sapentia_shopware_importer.tax_map|Shopware Tax Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
255|mail.channel.partner|Listeners of a Channel| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
250|res.country|Country| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
249|ir.actions.act_window.view|Action Window View| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
237|ir.model.relation|Relation Model|     This model tracks PostgreSQL tables used to implement Odoo many2many     relations.     |
211|ir.actions.server|Server Action| Add website option in server actions. |
205|amazon.fulfillment.country.rel|amazon.fulfillment.country.rel| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
201|account.analytic.account|Analytic Account| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
200|stock.picking.type|Picking Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
173|account.asset|Asset/Revenue Recognition| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
170|res.currency|Currency| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
161|account.analytic.tag|Analytic Tags| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
156|stock.location.route|Inventory Routes| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
156|mail.alias|Email Aliases|A Mail Alias is a mapping of an email address with a given Odoo Document        model. It is used by Odoo's mail gateway when processing incoming emails        sent to the system. If the recipient address (To) of the message matches        a Mail Alias, the message will be either processed following the rules        of that alias. If the message is a reply it will be attached to the        existing discussion on the corresponding record, otherwise a new        record of the corresponding model will be created.         This is meant to be used in combination with a catch-all email configuration        on the company's mail server, so that as soon as a new mail.alias is        created, it becomes immediately usable and Odoo will accept email for it.      |
153|account.bank.statement|Bank Statement| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
147|ir.filters|Filters| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
136|account.analytic.distribution|Analytic Account Distribution| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
134|rules_engine.package_cost|Rules Engine cost-per-package bands| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
129|ir.server.object.lines|Server Action value mapping| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
119|ks_dashboard_ninja.item|Dashboard Ninja items| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
110|purchase.order|Purchase Order| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
105|mis.report.kpi.expression|MIS Report KPI Expression|A KPI Expression is an expression of a line of a MIS report Kpi.     It's used to compute the kpi value.     |
105|mis.report.kpi|MIS Report KPI|A KPI is an element (ie a line) of a MIS report.      In addition to a name and description, it has an expression     to compute it based on queries defined in the MIS report.     It also has various informations defining how to render it     (numeric or percentage or a string, a prefix, a suffix, divider) and     how to render comparison of two values of the KPI.     KPI's have a sequence and are ordered inside the MIS report.     |
101|product.supplierinfo|Supplier Pricelist| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
101|shipped.order.data.queue.ept|Shipped Order Data Queue Ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
100|account.account.template|Templates for Accounts| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
96|theme.ir.ui.view|Theme UI View| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
93|product.attribute.value|Attribute Value| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
92|account.tax.repartition.line.template|Tax Repartition Line Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
92|account.report.manager|Manage Summary and Footnotes of Reports| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
90|project.tags|Project Tags| Tags of project's tasks |
89|res.groups|Access Groups| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
88|theme.ir.attachment|Theme Attachments| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
88|mail.channel|Discussion Channel| A mail.channel is a discussion group that may behave like a listener     on documents. |
87|account.root|Account codes first 2 digits| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
86|ir.module.category|Application| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
85|res.lang|Languages| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
83|rules_engine.package_content|Rules Engine Allowed Package Combination Contents| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
82|gamification.goal|Gamification Goal|Goal instance for a user      An individual goal for a user on a specified time period|
81|helpdesk.tag|Helpdesk Tags| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
77|mail.template|Email Templates| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
75|ir.cron|Scheduled Actions| Model describing cron jobs (also called actions or tasks).     |
74|documents.tag|Tag| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
73|ir.sequence.date_range|Sequence Date Range| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
70|stock.landed.cost.lines|Stock Landed Cost Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
70|stock.landed.cost|Stock Landed Cost| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
68|account.tax|Tax|     Use: Override Field and Methods for Compute Tax     |
67|account.financial.html.report.line|Account Report (HTML Line)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
65|product.packaging|Product Packaging| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
64|sapentia_shopware_importer.delivery_costs_map|Shopware Delivery Costs Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
63|crossovered.budget.lines|Budget Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
62|account.budget.post|Budgetary Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
60|ir.actions.report|Report Action| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
58|amazon.transaction.type|amazon.transaction.type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
58|amazon.transaction.line.ept|amazon.transaction.line.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
58|sapentia_shopware_importer.status_map|Shopware Status Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
58|documents.document|Document| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
57|mail.message.subtype|Message subtypes| Class holding subtype definition for messages. Subtypes allow to tune         the follower subscription, allowing only some subtypes to be pushed         on the Wall. |
56|rules_engine.carrier_service|Rules Engine Carrier Services| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
56|res.currency.rate|Currency Rate| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
55|base.automation|Automated Action| Add resource and calendar for time-based conditions |
52|ir.actions.client|Client Action| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
50|ir.exports|Exports| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
49|res.users|Users| Update of res.users class         - add a preference about sending emails about notifications         - make a new user follow itself         - add a welcome message         - add suggestion preference         - if adding groups to a user, check mail.channels linked to this user           group, and the user. This is done by overriding the write method.     |
49|resource.resource|Resources| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
49|hr.employee.public|Public Employee| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
49|hr.employee|Employee|"     NB: Any field only available on the model hr.employee (i.e. not on the     hr.employee.public model) should have `groups=""hr.group_hr_user""` on its     definition to avoid being prefetched when the user hasn't access to the     hr.employee model. Indeed, the prefetch loads the data for all the fields     that are available according to the group defined on them.     "|
48|rules_engine.carrier_surcharges|Rules Engine Carriers Surcharges| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
45|res.users.log|Users Log| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
45|bus.presence|User Presence| User Presence         Its status is 'online', 'away' or 'offline'. This model should be a one2one, but is not         attached to res_users to avoid database concurrence errors. Since the 'update' method is executed         at each poll, if the user have multiple opened tabs, concurrence errors can happend, but are 'muted-logged'.     |
45|account.journal|Journal| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
45|hr.contract|Contract| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
44|resource.calendar.attendance|Work Detail| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
41|account.analytic.group|Analytic Categories| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
39|ir.config_parameter|System Parameter|Per-database storage of configuration key-value pairs.|
36|ir.ui.view.custom|Custom View| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
35|rules_engine.export_tarrifs|Rules Engine export tarrifs| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
35|rules_engine.export_tarrif_components|Rules Engine export tarrif components| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
34|amazon.return.reason.ept|Amazon Return Reasons| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
31|mis.report.instance.period|MIS Report Instance Period|A MIS report instance has the logic to compute     a report template for a given date period.      Periods have a duration (day, week, fiscal period) and     are defined as an offset relative to a pivot date.     |
31|hr.job|Job Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
27|account.account.tag|Account Tag| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
25|stock.warehouse|Warehouse| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
24|stock.package_level|Stock Package Level| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
23|sapentia_shopware_importer.payment_status_map|Shopware Payment Status Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
21|res.partner.industry|Industry| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
20|gamification.goal.definition|Gamification Goal Definition|Goal definition      A goal definition contains the way to evaluate an objective     Each module wanting to be able to set goals to the users needs to create     a new gamification_goal_definition     |
19|amazon.adjustment.reason.code|amazon.adjustment.reason.code| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
19|x_ticket_sub|Ticket Type Subcategory| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
19|project.task.type|Task Stage| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
19|uom.uom|Product Unit of Measure| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
19|mail.activity.type|Activity Type| Activity Types are used to categorize activities. Each type is a different     kind of activity e.g. call, mail, meeting. An activity can be generic i.e.     available for all models using activities; or specific to a model in which     case res_model_id field should be used. |
18|account.fiscal.position.tax|Tax Mapping of Fiscal Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|sapentia_shopware_importer.article_overide_map|Shopware Product Mapping Overide| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|rules_engine.carrier|Rules Engine Carriers| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|product.pricelist|Pricelist| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|documents.workflow.action|Document Workflow Tag Action| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|account.account.type|Account Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
18|project.project|Project| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17|amazon.developer.details.ept|amazon developer details ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17|account.tax.group|Tax Group| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17|payment.icon|Payment Icon| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
17|crm.team|Sales Team| A mixin for models that inherits mail.alias. This mixin initializes the         alias_id column in database, and manages the expected one-to-one         relation between your model and mail aliases.     |
15|account.payment.term.line|Payment Terms Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
15|account.payment.term|Payment Terms| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
15|account.incoterms|Incoterms| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
15|ir.default|Default Values| User-defined default values for fields. |
14|documents.folder|Documents Workspace| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
14|documents.facet|Category| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
14|hr.department|HR Department| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
13|project.profitability.report|Project Profitability Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
13|helpdesk.ticket.type|Helpdesk Ticket Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
13|helpdesk.sla|Helpdesk SLA Policies| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
13|gamification.challenge.line|Gamification generic goal for challenge|Gamification challenge line      Predefined goal for 'gamification_challenge'     These are generic list of goals with only the target goal defined     Should only be created for the gamification.challenge object     |
13|date.range|Date Range| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
13|ks_dashboard_ninja.board|Dashboard Ninja| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|web_tour.tour|Tours| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|sapentia_shopware_importer.sale_team_map|Shopware Sales Team Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|rules_engine.pick_costs|Rules Engine Warehouse Pick Costs| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|rules_engine.release_conditions|Rules Engine Release Conditions| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|payment.acquirer|Payment Acquirer| Acquirer Model. Each specific acquirer can extend the model by adding     its own fields, using the acquirer_name as a prefix for the new fields.     Using the required_if_provider='<name>' attribute on fields it is possible     to have required fields that depend on a specific acquirer.      Each acquirer has a link to an ir.ui.view record that is a template of     a button used to display the payment form. See examples in ``payment_ingenico``     and ``payment_paypal`` modules.      Methods that should be added in an acquirer-specific implementation:       - ``<name>_form_generate_values(self, reference, amount, currency,        partner_id=False, partner_values=None, tx_custom_values=None)``:        method that generates the values used to render the form button template.      - ``<name>_get_form_action_url(self):``: method that returns the url of        the button form. It is used for example in ecommerce application if you        want to post some data to the acquirer.      - ``<name>_compute_fees(self, amount, currency_id, country_id)``: computes        the fees of the acquirer, using generic fields defined on the acquirer        model (see fields definition).      Each acquirer should also define controllers to handle communication between     OpenERP and the acquirer. It generally consists in return urls given to the     button form and that the acquirer uses to send the customer back after the     transaction, with transaction details given as a POST request.     |
12|account.tax.report.line|Account Tax Report Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
12|documents.workflow.rule|A set of condition and actions which will be available to all attachments matching the conditions| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
11|account.tax.template|Templates for Taxes| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
11|product.attribute|Product Attribute| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
11|res.partner.category|Partner Tags| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
10|utm.medium|UTM Medium| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
10|project.timesheet.forecast.report.analysis|Timesheet & Planning Statistics| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
10|res.bank|Bank| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
10|helpdesk.team|Helpdesk Team| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
9|gamification.challenge|Gamification Challenge|Gamification challenge      Set of predifined objectives assigned to people with rules for recurrence and     rewards      If 'user_ids' is defined and 'period' is different than 'one', the set will     be assigned to the users for each period (eg: every 1st of each month if     'monthly' is selected)     |
9|gamification.badge|Gamification Badge|Badge object that users can send and receive|
9|fbm.sale.order.report.ept|FBM Sale Order Report Ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
8|rules_engine.warehouse_tariff|Rules Engine Warehouse Tarrifs| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
8|account.fiscal.position|Fiscal Position|     Inherited this model for relating with vat configuration.     @author: Maulik Barad on Date 15-Jan-2020.     |
8|approval.category|Approval Category| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|amazon.adjustment.reason.group|amazon.adjustment.reason.group| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|mrp.workcenter.productivity.loss|Workcenter Productivity Losses| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|website.menu|Website Menu| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|hr.leave.type|Time Off Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|account.reconcile.model|Preset to create journal entries during a invoices and payments matching| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|calendar.alarm|Event Alarm| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|decimal.precision|Decimal Precision| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|amazon.marketplace.ept|Amazon Marketplace Details| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|account.group|Account Group| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
7|amazon.instance.ept|Amazon Instance Details| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
6|sapentia_shopware_importer.customer_category_map|Shopware Customer Category Map| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
6|res.partner.title|Partner Title| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
6|report.paperformat|Paper Format Config| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
6|website.page|Page| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
6|crm.lead.scoring.frequency.field|Fields that can be used for predictive lead scoring computation| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
6|digest.tip|Digest Tips| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|utm.source|UTM Source| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|gamification.karma.rank|Rank based on karma| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|uom.category|Product UoM Categories| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|hr.plan.activity.type|Plan activity type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|iap.account|IAP Account| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|helpdesk.stage|Helpdesk Stage| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|mail.compose.message|Email composition wizard| Generic message composition wizard. You may inherit from this wizard         at model and view levels to provide specific features.          The behavior of the wizard depends on the composition_mode field:         - 'comment': post on a record. The wizard is pre-populated via ``get_record_data``         - 'mass_mail': wizard in mass mailing mode where the mail details can             contain template placeholders that will be merged with actual data             before being sent to each recipient.     |
5|calendar.attendee|Calendar Attendee Information| Calendar Attendee Information |
5|barcode.rule|Barcode Rule| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|rules_engine.incoterm_rules|Automatic Incoterm Rules| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|ir.actions.act_url|Action URL| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|crm.lead|Lead/Opportunity| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
5|calendar.event|Calendar Event| Model for Calendar Event          Special context keys :             - `no_mail_to_attendees` : disabled sending email to attendees when creating/editing a meeting     |
4|utm.campaign|UTM Campaign| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|resource.calendar|Resource Working Time| Calendar model for a resource. It has       - attendance_ids: list of resource.calendar.attendance that are a working                        interval in a given weekday.      - leave_ids: list of leaves linked to this calendar. A leave can be general                   or linked to a specific resource, depending on its resource_id.      All methods in this class use intervals. An interval is a tuple holding     (begin_datetime, end_datetime). A list of intervals is therefore a list of     tuples, holding several intervals of work or leaves. |
4|report.layout|Report Layout| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|mrp.workcenter.productivity.loss.type|MRP Workorder productivity losses| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|mis.report.style|MIS Report Style| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|ks_dashboard_ninja.board_template|Dashboard Ninja Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|res.country.group|Country Group| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|ir.actions.todo|Configuration Wizards|     Configuration Wizards     |
4|slide.channel.partner|Channel / Partners (Members)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|utm.stage|Campaign Stage|Stage for utm campaigns. |
4|crm.stage|CRM Stages| Model for case stages. This models the main stages of a document         management flow. Main CRM objects (leads, opportunities, project         issues, ...) will now use only stages, instead of state and stages.         Stages are for example used to display the kanban view of records.     |
4|account.financial.html.report|Account Report (HTML)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
4|documents.share|Documents Share| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
3|hr.leave.report|Time Off Summary / Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
3|account.payment.method|Payment Methods| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
3|crm.lost.reason|Opp. Lost Reason| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
3|mis.report|MIS Report Template|A MIS report template (without period information)      The MIS report holds:     * a list of explicit queries; the result of each query is       stored in a variable with same name as a query, containing as list       of data structures populated with attributes for each fields to fetch;       when queries have an aggregate method and no fields to group, it returns       a data structure with the aggregated fields     * a list of KPI to be evaluated based on the variables resulting       from the accounting data and queries (KPI expressions can references       queries and accounting expression - see AccoutingExpressionProcessor)     |
3|mis.report.query|MIS Report Query|"A query to fetch arbitrary data for a MIS report.      A query works on a model and has a domain and list of fields to fetch.     At runtime, the domain is expanded with a ""and"" on the date/datetime field.     "|
3|mis.report.instance|MIS Report Instance|The MIS report instance combines everything to compute     a MIS report template for a set of periods.|
3|l10n_uk.vat.obligation|HMRC VAT Obligation| VAT obligations retrieved from HMRC |
3|account.online.link|Connection to an online banking institution| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|hr.plan|plan| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|complaint_by_order_line.complaints|complaint_by_order_line.complaints| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|rules_engine.warehouse_import_source|Warehouse Import Source| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|sapentia_shopware_importer.shopware_instance|Shopware Instance| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|sms.template|SMS Templates|Templates for sending SMS|
2|product.removal|Removal Strategy| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|purchase.requisition.type|Purchase Requisition Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|stock.warehouse.orderpoint|Minimum Inventory Rule| Defines Minimum stock rules. |
2|ir.mail_server|Mail Server|Represents an SMTP server, able to send outgoing emails, with SSL and TLS capabilities.|
2|account_followup.followup.line|Follow-up Criteria| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|date.range.type|Date Range Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|res.company|Companies| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|rules_engine.automatic_warehouse_imports|Automatic Warehouse Import| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
2|hr.leave|Time Off|" Leave Requests Access specifications       - a regular employee / user       - can see all leaves;       - cannot see name field of leaves belonging to other user as it may contain         private information that we don't want to share to other people than         HR people;       - can modify only its own not validated leaves (except writing on state to         bypass approval);       - can discuss on its leave requests;       - can reset only its own leaves;       - cannot validate any leaves;      - an Officer       - can see all leaves;       - can validate ""HR"" single validation leaves from people if        - he is the employee manager;        - he is the department manager;        - he is member of the same department;        - target employee has no manager and no department manager;       - can validate ""Manager"" single validation leaves from people if        - he is the employee manager;        - he is the department manager;        - target employee has no manager and no department manager;       - can first validate ""Both"" double validation leaves from people like ""HR""         single validation, moving the leaves to validate1 state;       - cannot validate its own leaves;       - can reset only its own leaves;       - can refuse all leaves;      - a Manager       - can do everything he wants      On top of that multicompany rules apply based on company defined on the     leave request leave type.     "|
1|sale.workflow.process.ept|sale workflow process| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|account.online.account|representation of an online bank account| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|website|Website| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|rules_engine.warehouse_export_destination|Warehouse Export Destination| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|utm.tag|UTM Tag|Model of categories of utm campaigns, i.e. marketing, newsletter, ... |
1|hr.leave.report.calendar|Time Off Calendar| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|resource.calendar.leaves|Resource Time Off Detail| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|product.pricelist.item|Pricelist Rule| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|sms.sms|Outgoing SMS| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|sapentia_shopware_importer.manual_import_wizard|Manual Shopware Import Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
1|mis.budget.item|MIS Budget Item (by KPI)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|fetchmail.server|Incoming Mail Server|Incoming POP/IMAP mail server account|
1|digest.digest|Digest| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|slide.channel.tag.group|Channel/Course tags| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|barcode.nomenclature|Barcode Nomenclature| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|rules_engine.automatic_warehouse_exports|Automatic Warehouse Export| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|amazon.seller.ept|Amazon Seller Details| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|account.chart.template|Account Chart Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|hr.leave.allocation|Time Off Allocation| Allocation Requests Access specifications: similar to leave requests |
1|slide.slide|Slides| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|slide.channel|Slide Channel| A channel is a container of slides. |
1|mis.budget|MIS Budget by KPI| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
1|crossovered.budget|Budget| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|removal.orders.lines.ept|removal.orders.lines.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|removal.order.config.ept|removal.order.config.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|product.ul.ept|product.ul.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|inbound.shipment.plan.line|inbound.shipment.plan.line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|inbound.shipment.details.line|inbound.shipment.details.line|     Use: Display Inbound Shipment Details Line      |
0|inbound.shipment.details|inbound.shipment.details|     Use: Display Inbound Shipment Details before create the Inbound Shipments When user will click     on confirm then Shipment will be Created      |
0|import.product|import.product| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|x_heldpesk|heldpesk| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|complaint_by_order_line.complaint_type|complaint_by_order_line.complaint_type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|common.product.image.ept|common.product.image.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|common.product.brand.ept|common.product.brand.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.stock.adjustment.config|amazon.stock.adjustment.config| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.shipment.label.wizard|amazon.shipment.label.wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.sale.order.fee.ept|amazon.sale.order.fee.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.product.wizard|amazon.product.wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.product.search.term|amazon.product.search.term| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.product.bullet.description|amazon.product.bullet.description| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.prepare.export.product.ept|amazon.prepare.export.product.ept| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.inbound.import.shipment.ept|amazon.inbound.import.shipment.ept| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.import.product.wizard|amazon.import.product.wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.fulfillment.center|amazon.fulfillment.center| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.carton.content.info.ept|amazon.carton.content.info.ept| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.cancel.order.wizard|amazon.cancel.order.wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.cancel.order.line.wizard|amazon.cancel.order.line.wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mrp.workorder.line|Workorder move line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.workcenter.productivity|Workcenter Productivity Log| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.routing.workcenter|Work Center Usage| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.workcenter|Work Center| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|stock_barcode.lot|Wizard to scan SN/LN for specific product| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.online.wizard|Wizard to link synchronized accounts to journal| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|website.rewrite|Website rewrite| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|theme.website.page|Website Theme Page| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|theme.website.menu|Website Theme Menu| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|website.published.mixin|Website Published Mixin| The base model, which is implicitly inherited by all models. |
0|web_editor.converter.test|Web Editor Converter Test| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|web_editor.converter.test.sub|Web Editor Converter Subtest| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|stock.warn.insufficient.qty.unbuild|Warn Insufficient Unbuild Quantity| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.warn.insufficient.qty.scrap|Warn Insufficient Scrap Quantity| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.warn.insufficient.qty|Warn Insufficient Quantity| The base model, which is implicitly inherited by all models. |
0|vendor.stock.ept|Vendor Stock| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|validate.account.move|Validate Account Move| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|vat.config.line.ept|VAT Configuration Line EPT|     For Setting VAT number for Country.     @author: Maulik Barad on Date 11-Jan-2020.     |
0|vat.config.ept|VAT Configuration EPT|     For Setting VAT number in warehouse partner.     @author: Maulik Barad on Date 11-Jan-2020.     |
0|change.password.user|User, Change Password Wizard| A model to configure users in the change password wizard. |
0|base.module.upgrade|Upgrade Module| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|snailmail.letter.missing.required.fields|Update address of partner| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base.update.translations|Update Translations| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base.module.update|Update Module| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|_unknown|Unknown|     Abstract model used as a substitute for relational fields with an unknown     comodel.     |
0|utm.mixin|UTM Mixin| Mixin class for objects which can be tracked by marketing. |
0|rules_engine.status_line|Transfer Status Wizard Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.status_wizzard|Transfer Status Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.split_wizard|Transfer Split Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.pack_wizard|Transfer Packing Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.overprocessed.transfer|Transfer Over Processed Stock| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.move_wizard|Transfer Move Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.merge_wizard|Transfer Merge Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.breakout_wizard|Transfer Line Split Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.consolidate_wizard|Transfer Line Merge Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.consign_line|Transfer Consign Wizard Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.consign_wizzard|Transfer Consign Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.traceability.report|Traceability Report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|timesheet.validation.line|Timesheet Validation Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|timesheet.validation|Timesheet Validation| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|theme.utils|Theme Utils| The base model, which is implicitly inherited by all models. |
0|base_import.tests.models.float|Tests: Base Import Model Float| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.complex|Tests: Base Import Model Complex| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.o2m.child|Tests : Base Import Model, One to Many child| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.o2m|Tests : Base Import Model, One to Many| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.m2o.required.related|Tests : Base Import Model, Many to One required related| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.m2o.required|Tests : Base Import Model, Many to One required| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.m2o.related|Tests : Base Import Model, Many to One related| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.m2o|Tests : Base Import Model, Many to One| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char.stillreadonly|Tests : Base Import Model, Character still readonly| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char.states|Tests : Base Import Model, Character states| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char.required|Tests : Base Import Model, Character required| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char.readonly|Tests : Base Import Model, Character readonly| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char.noreadonly|Tests : Base Import Model, Character No readonly| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.char|Tests : Base Import Model, Character| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base_import.tests.models.preview|Tests : Base Import Model Preview| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|resource.test|Test Resource Model| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.fiscal.position.template|Template for Fiscal Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.fiscal.position.tax.template|Tax Mapping Template of Fiscal Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|tax.adjustments.wizard|Tax Adjustments Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|studio.mixin|Studio Mixin| Mixin that overrides the create and write methods to properly generate         ir.model.data entries flagged with Studio for the corresponding resources.         Doesn't create an ir.model.data if the record is part of a module being         currently installed as the ir.model.data will be created automatically         afterwards.     |
0|report.stock.report_stock_rule|Stock rule report| The base model, which is implicitly inherited by all models. |
0|stock.track.line|Stock Track Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.track.confirmation|Stock Track Confirmation| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.rules.report|Stock Rules report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.quantity.history|Stock Quantity History| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.package.destination|Stock Package Destination| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.assign.serial|Stock Assign Serial Numbers| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.split_segment|Split Wizard Segment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|snailmail.letter|Snailmail Letter| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|slide.tag|Slide Tag| Tag to search slides accross channels. |
0|slide.slide.partner|Slide / Partner decorated m2m| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|sapentia_shopware_importer.popup_box|Shopware Popup Box| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|shipment.report.configure.fulfillment.center.lines.ept|Shipment Report Configuration Fulfillment Center Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|planning.slot.template|Shift Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|settlement.report.configure.fees.lines.ept|Settlement Report Configuration Fee Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sms.composer|Send SMS Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|planning.send|Send Planning| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|followup.send|Send Follow-ups| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.asset.sell|Sell Asset| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mailing.mailing.test|Sample Mail Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sale.advance.payment.inv|Sales Advance Payment Invoice| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sale.payment.acquirer.onboarding.wizard|Sale Payment acquire onboarding wizard| Override for the sale quotation onboarding panel. |
0|sale.order.option|Sale Options| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|sms.template.preview|SMS Template Preview| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sms.resend|SMS Resend| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sms.api|SMS API| The base model, which is implicitly inherited by all models. |
0|website.seo.metadata|SEO metadata| The base model, which is implicitly inherited by all models. |
0|stock.scheduler.compute|Run Scheduler Manually| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.weight_bands|Rules Engine Warehouse weight bands| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rules_engine.popup_box|Rules Engine Popup Box| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.outstanding_orders|Rules Engine Ourstanding Orders| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.routing|Routings| Specifies routings of work centers |
0|stock.return.picking.line|Return Picking Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.return.picking|Return Picking| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|resource.mixin|Resource Mixin| The base model, which is implicitly inherited by all models. |
0|reset.view.arch.wizard|Reset View Architecture Wizard| A wizard to reset views architecture. |
0|sms.resend.recipient|Resend Notification| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.payment.register|Register Payment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mrp.product.produce.line|Record production line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mrp.product.produce|Record Production| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.reconcile.model.template|Reconcile Model Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rating.parent.mixin|Rating Parent Mixin| The base model, which is implicitly inherited by all models. |
0|rating.mixin|Rating Mixin| The base model, which is implicitly inherited by all models. |
0|rating.rating|Rating| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|ir.qweb.field.many2many|Qweb field many2many| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.qweb|Qweb Field qweb| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.text|Qweb Field Text| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.selection|Qweb Field Selection| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.relative|Qweb Field Relative| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.monetary|Qweb Field Monetary| ``monetary`` converter, has a mandatory option     ``display_currency`` only if field is not of type Monetary.     Otherwise, if we are in presence of a monetary field, the field definition must     have a currency_field attribute set.      The currency is used for formatting *and rounding* of the float value. It     is assumed that the linked res_currency has a non-empty rounding value and     res.currency's ``round`` method is used to perform rounding.      .. note:: the monetary converter internally adds the qweb context to its               options mapping, so that the context is available to callees.               It's set under the ``_values`` key.     |
0|ir.qweb.field.many2one|Qweb Field Many to One| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.integer|Qweb Field Integer| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.image|Qweb Field Image|     Widget options:      ``class``         set as attribute on the generated <img> tag     |
0|ir.qweb.field.html|Qweb Field HTML| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.float_time|Qweb Field Float Time|" ``float_time`` converter, to display integral or fractional values as     human-readable time spans (e.g. 1.5 as ""01:30"").      Can be used on any numerical field.     "|
0|ir.qweb.field.float|Qweb Field Float| Override qweb.field.float to add a `decimal_precision` domain option     and use that instead of the column's own value if it is specified     |
0|ir.qweb.field.duration|Qweb Field Duration|" ``duration`` converter, to display integral or fractional values as     human-readable time spans (e.g. 1.5 as ""1 hour 30 minutes"").      Can be used on any numerical field.      Has an option ``unit`` which can be one of ``second``, ``minute``,     ``hour``, ``day``, ``week`` or ``year``, used to interpret the numerical     field value before converting it. By default use ``second``.      Has an option ``round``. By default use ``second``.      Has an option ``digital`` to display 01:00 instead of 1 hour      Sub-second values will be ignored.     "|
0|ir.qweb.field.datetime|Qweb Field Datetime| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.date|Qweb Field Date| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.contact|Qweb Field Contact| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb.field.barcode|Qweb Field Barcode| ``barcode`` widget rendering, inserts a data:uri-using image tag in the     document. May be overridden by e.g. the website module to generate links     instead.     |
0|ir.qweb.field|Qweb Field| Used to convert a t-field specification into an output HTML field.      :meth:`~.to_html` is the entry point of this conversion from QWeb, it:      * converts the record value to html using :meth:`~.record_to_html`     * generates the metadata attributes (``data-oe-``) to set on the root       result node     * generates the root result node itself through :meth:`~.render_element`     |
0|ir.qweb|Qweb| QWeb object for rendering stuff in the website context |
0|sale.order.template.option|Quotation Template Option| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|sale.order.template.line|Quotation Template Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|sale.order.template|Quotation Template| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|stock.putaway.rule|Putaway Rule| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|purchase.requisition.line|Purchase Requisition Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|publisher_warranty.contract|Publisher Warranty Contract| The base model, which is implicitly inherited by all models. |
0|project.sale.line.employee.map|Project Sales line, employee mapping| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|report.sale.report_saleproforma|Proforma Report| The base model, which is implicitly inherited by all models. |
0|mrp.document|Production Document| Extension of ir.attachment only used in MRP to handle archivage     and basic versioning.     |
0|report.mrp_account_enterprise.product_template_cost_structure|Product Template Cost Structure Report| The base model, which is implicitly inherited by all models. |
0|product.template.attribute.exclusion|Product Template Attribute Exclusion| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|product.replenish|Product Replenish| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|product.price_list|Product Price per Unit Based on Pricelist Version| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|report.product.report_pricelist|Product Price List Report| The base model, which is implicitly inherited by all models. |
0|product.margin|Product Margin| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|product.attribute.custom.value|Product Attribute Custom Value| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|portal.wizard.user|Portal User Config|         A model to configure users in the portal wizard.     |
0|portal.share|Portal Sharing| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|portal.mixin|Portal Mixin| The base model, which is implicitly inherited by all models. |
0|planning.planning|Planning sent by email| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|planning.slot.report.analysis|Planning Statistics| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|planning.slot|Planning Shift| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|planning.role|Planning Role| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|planning.recurrency|Planning Recurrence| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|hr.plan.wizard|Plan Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|phone.validation.mixin|Phone Validation Mixin| The base model, which is implicitly inherited by all models. |
0|payment.acquirer.onboarding.wizard|Payment acquire onboarding wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|payment.transaction|Payment Transaction| Transaction Model. Each specific acquirer can extend the model by adding     its own fields.      Methods that can be added in an acquirer-specific implementation:       - ``<name>_create``: method receiving values used when creating a new        transaction and that returns a dictionary that will update those values.        This method can be used to tweak some transaction values.      Methods defined for convention, depending on your controllers:       - ``<name>_form_feedback(self, data)``: method that handles the data coming        from the acquirer after the transaction. It will generally receives data        posted by the acquirer after the transaction.     |
0|payment.token|Payment Token| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.asset.pause|Pause Asset| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mail.resend.partner|Partner with additionnal information for mail resend| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|crm.partner.binding|Partner linking/binding in CRM wizard|         Handle the partner binding or generation in any CRM wizard that requires         such feature, like the lead2opportunity wizard, or the         phonecall2opportunity wizard.  Try to find a matching partner from the         CRM model's information (name, email, phone number, etc) or create a new         one on the fly.         Use it like a mixin with the wizard of your choice.     |
0|report.report_xlsx.partner_xlsx|Partner XLSX Report| The base model, which is implicitly inherited by all models. |
0|account.partner.ledger|Partner Ledger| The base model, which is implicitly inherited by all models. |
0|res.partner.autocomplete.sync|Partner Autocomplete Sync| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rules_engine.pack_target_stock|Packing Wizard Stock| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.pack_segment|Packing Wizard Segment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.financial.year.op|Opening Balance of Financial Year| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.onwards_transfer_wizard|Onwards Transfer Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|website.published.multi.mixin|Multi Website Published Mixin| The base model, which is implicitly inherited by all models. |
0|website.multi.mixin|Multi Website Mixin| The base model, which is implicitly inherited by all models. |
0|multi_select_wizard.select_wizard|Multi Selection Wizards| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.move_target_stock|Move Wizard Stock| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.move_segment|Move Wizard Segment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|ir.module.module.exclusion|Module exclusion| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base.module.uninstall|Module Uninstall| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|report.base.report_irmodulereference|Module Reference Report (base)| The base model, which is implicitly inherited by all models. |
0|asset.modify|Modify Asset| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|wk.wizard.message|Message Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base.partner.merge.automatic.wizard|Merge Partner Wizard|         The idea behind this wizard is to create a list of potential partners to         merge. We use two objects, the first one is the wizard for the end-user.         And the second will contain the partner list to merge.     |
0|base.partner.merge.line|Merge Partner Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|crm.merge.opportunity|Merge Opportunities|         Merge opportunities together.         If we're talking about opportunities, it's just because it makes more sense         to merge opps than leads, because the leads are more ephemeral objects.         But since opportunities are leads, it's also possible to merge leads         together (resulting in a new lead), or leads and opps together (resulting         in a new opp).     |
0|mailing.list.merge|Merge Mass Mailing List| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mailing.contact.subscription|Mass Mailing Subscription Information| Intermediate model between mass mailing list and mass mailing contact         Indicates if a contact is opted out for a particular list     |
0|mailing.trace.report|Mass Mailing Statistics| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mailing.mailing.schedule.date|Mass Mailing Scheduling| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|website.mass_mailing.popup|Mailing list popup| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mailing.trace|Mailing Statistics| MailingTrace models the statistics collected about emails. Those statistics     are stored in a separated model and table to avoid bloating the mail_mail table     with statistics values. This also allows to delete emails send with mass mailing     without loosing the statistics about them. |
0|mailing.list|Mailing List|Model of a contact list. |
0|mail.bot|Mail Bot| The base model, which is implicitly inherited by all models. |
0|report.mrp_account_enterprise.mrp_cost_structure|MRP Cost Structure Report| The base model, which is implicitly inherited by all models. |
0|mis.report.subkpi|MIS Report Sub-KPI| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mis.report.instance.period.sum|MIS Report Instance Period Sum| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|add.mis.report.instance.dashboard.wizard|MIS Report Add to Dashboard Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mis.report.subreport|MIS Report - Sub Reports Relation| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mis.kpi.data|MIS Kpi Data Abtract class|Abstract class for manually entered KPI values.|
0|report.mis_builder.mis_report_instance_xlsx|MIS Builder XLSX report| The base model, which is implicitly inherited by all models. |
0|mis.budget.by.account.item|MIS Budget Item (by Account)| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mis.budget.item.abstract|MIS Budget Item (Abstract Base Class)| The base model, which is implicitly inherited by all models. |
0|account.online.link.wizard|Link synchronized account to a journal| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.link.journal.line|Link one bank account to a journal| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.link.journal|Link list of bank accounts to journals| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|link.tracker.code|Link Tracker Code| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|link.tracker.click|Link Tracker Click| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|link.tracker|Link Tracker| Link trackers allow users to wrap any URL into a short URL that can be     tracked by Odoo. Clicks are counter on each link. A tracker is linked to     UTMs allowing to analyze marketing actions.      This model is also used in mass_mailing where each link in html body is     automatically converted into a short link that is tracked and integrates     UTMs. |
0|crm.lead.tag|Lead Tag| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|crm.lead.scoring.frequency|Lead Scoring Frequency| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base.language.import|Language Import| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base.language.export|Language Export| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock_barcode.lot.line|LN/SN Product Lines| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|documents.account.folder.setting|Journal and Folder settings| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.bank.statement.import.journal.creation|Journal Creation on Bank Statement Import| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mail.wizard.invite|Invite wizard| Wizard to invite partners (or channels) and make them followers. |
0|account.online.journal|Interface for Online Account Journal|     This class is used as an interface.     It is used to save the state of the current online accout.     |
0|base.language.install|Install Language| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|import.product.removal.order.wizard|Import product through csv file for removal order| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|import.product.inbound.shipment|Import product through csv file for inbound shipment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base.import.module|Import Module| Import Module |
0|amazon.inbound.shipment.report.wizard|Import In-bound Shipment Report Through CSV File| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.bank.statement.import|Import Bank Statement| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.immediate.transfer|Immediate Transfer| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|image.mixin|Image Mixin| The base model, which is implicitly inherited by all models. |
0|report.hr_holidays.report_holidayssummary|Holidays Summary Report| The base model, which is implicitly inherited by all models. |
0|ir.http|HTTP Routing| The base model, which is implicitly inherited by all models. |
0|hr.holidays.summary.employee|HR Time Off Summary Report By Employee| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|hmrc.service|HMRC service|     Service in order to pass through our authentication proxy     |
0|l10n_uk.hmrc.send.wizard|HMRC Send Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|portal.wizard|Grant Portal Access|         A wizard to manage the creation/removal of portal users.     |
0|global.channel.ept|Global Channel| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|report.account.report_hash_integrity|Get hash integrity result as PDF.| The base model, which is implicitly inherited by all models. |
0|crm.lead.lost|Get Lost Reason| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.generic.tax.report|Generic Tax Report| The base model, which is implicitly inherited by all models. |
0|payment.link.wizard|Generate Sales Payment Link| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.general.ledger|General Ledger Report| The base model, which is implicitly inherited by all models. |
0|gamification.badge.user.wizard|Gamification User Badge Wizard| Wizard allowing to grant a badge to a user|
0|gamification.badge.user|Gamification User Badge|User having received a badge|
0|gamification.goal.wizard|Gamification Goal Wizard|Wizard to update a manual goal|
0|snailmail.letter.format.error|Format Error Sending a Snailmail Letter| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.followup.report|Follow-up Report| The base model, which is implicitly inherited by all models. |
0|account.fiscal.year|Fiscal Year| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|ir.fields.converter|Fields Converter| The base model, which is implicitly inherited by all models. |
0|account.invoice_extract.words|Extracted words from invoice scan| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|slide.slide.link|External URL for a particular slide| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account_reports.export.wizard|Export wizard for accounting's reports| Extends the report export wizard to give it the ability to save the     attachments it generates as documents, in a folder of the Documents app.     |
0|account_reports.export.wizard.format|Export format for accounting's reports| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|calendar.event.type|Event Meeting Type| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|calendar.alarm_manager|Event Alarm Manager| The base model, which is implicitly inherited by all models. |
0|hr.employee.category|Employee Category| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|slide.embed|Embedded Slides View Counter| Embedding in third party websites. Track view count, generate statistics. |
0|mail.resend.message|Email resend wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|email_template.preview|Email Template Preview| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mail.alias.mixin|Email Aliases Mixin| A mixin for models that inherits mail.alias. This mixin initializes the         alias_id column in database, and manages the expected one-to-one         relation between your model and mail aliases.     |
0|mail.address.mixin|Email Address Mixin| Purpose of this mixin is to store a normalized email based on the primary email field.     A normalized email is considered as :         - having a left part + @ + a right part (the domain can be without '.something')         - being lower case         - having no name before the address. Typically, having no 'Name <>'     Ex:         - Formatted Email : 'Name <NaMe@DoMaIn.CoM>'         - Normalized Email : 'name@domain.com'     The primary email field can be specified on the parent model, if it differs from the default one ('email')     The email_normalized field can than be used on that model to search quickly on emails (by simple comparison     and not using time consuming regex anymore). |
0|documents.mixin|Documents creation mixin|     Inherit this mixin to automatically create a `documents.document` when     an `ir.attachment` is linked to a record.     Override this mixin's methods to specify an owner, a folder or tags     for the document.     |
0|documents.request_wizard|Document Request| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|sms.cancel|Dismiss notification for resend by model| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|snailmail.letter.cancel|Dismiss notification for resend by model| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mail.resend.cancel|Dismiss notification for resend by model| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|hr.departure.wizard|Departure Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|ir.demo_failure|Demo failure| Stores modules for which we could not install demo data     |
0|ir.demo_failure.wizard|Demo Failure wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|ir.demo|Demo| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|delivery.price.rule|Delivery Price Rules| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|choose.delivery.package|Delivery Package Selection Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|choose.delivery.carrier|Delivery Carrier Selection Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|date.range.generator|Date Range Generator| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|data.queue.mixin.ept|Data Queue Mixin| Mixin class for delete unused data queue from database.|
0|ks_dashboard_ninja.item_goal|Dashboard Ninja Items Goal Lines| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|ks_dashboard_ninja.item_action|Dashboard Ninja Items Action Lines| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|ks_ninja_dashboard.item_action|Dashboard Ninja Item Actions| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|crm.quotation.partner|Create new or use existing Customer on new Quotation|         Handle the partner binding or generation in any CRM wizard that requires         such feature, like the lead2opportunity wizard, or the         phonecall2opportunity wizard.  Try to find a matching partner from the         CRM model's information (name, email, phone number, etc) or create a new         one on the fly.         Use it like a mixin with the wizard of your choice.     |
0|account.accrual.accounting.wizard|Create accrual entry.| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|project.task.create.timesheet|Create Timesheet from task| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|project.task.create.sale.order|Create SO from task| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|project.create.sale.order|Create SO from project| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|project.create.sale.order.line|Create SO Line from project| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|wizard.ir.model.menu.create|Create Menu Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|project.create.invoice|Create Invoice from project| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|crm.lead2opportunity.partner|Convert Lead to Opportunity (not in mass)|         Handle the partner binding or generation in any CRM wizard that requires         such feature, like the lead2opportunity wizard, or the         phonecall2opportunity wizard.  Try to find a matching partner from the         CRM model's information (name, email, phone number, etc) or create a new         one on the fly.         Use it like a mixin with the wizard of your choice.     |
0|crm.lead2opportunity.partner.mass|Convert Lead to Opportunity (in mass)|         Handle the partner binding or generation in any CRM wizard that requires         such feature, like the lead2opportunity wizard, or the         phonecall2opportunity wizard.  Try to find a matching partner from the         CRM model's information (name, email, phone number, etc) or create a new         one on the fly.         Use it like a mixin with the wizard of your choice.     |
0|slide.question|Content Quiz Question| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rules_engine.consolidate_segment|Consolidation Wizard Segment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.consolidated.journal|Consolidated Journals Report| The base model, which is implicitly inherited by all models. |
0|confirm.stock.sms|Confirm Stock SMS| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|shipment.report.configure.fulfillment.center.ept|Configure Fulfillment Center in Shipment Report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|settlement.report.configure.fees.ept|Configure Fees in Settlement Report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|res.config.settings|Config Settings| Inherit the base settings to add a counter of failed email + configure     the alias domain. |
0|res.config.installer|Config Installer|" New-style configuration base specialized for addons selection     and installation.      Basic usage     -----------      Subclasses can simply define a number of boolean fields. The field names     should be the names of the addons to install (when selected). Upon action     execution, selected boolean fields (and those only) will be interpreted as     addons to install, and batch-installed.      Additional addons     -----------------      It is also possible to require the installation of an additional     addon set when a specific preset of addons has been marked for     installation (in the basic usage only, additionals can't depend on     one another).      These additionals are defined through the ``_install_if``     property. This property is a mapping of a collection of addons (by     name) to a collection of addons (by name) [#]_, and if all the *key*     addons are selected for installation, then the *value* ones will     be selected as well. For example::          _install_if = {             ('sale','crm'): ['sale_crm'],         }      This will install the ``sale_crm`` addon if and only if both the     ``sale`` and ``crm`` addons are selected for installation.      You can define as many additionals as you wish, and additionals     can overlap in key and value. For instance::          _install_if = {             ('sale','crm'): ['sale_crm'],             ('sale','project'): ['sale_service'],         }      will install both ``sale_crm`` and ``sale_service`` if all of     ``sale``, ``crm`` and ``project`` are selected for installation.      Hook methods     ------------      Subclasses might also need to express dependencies more complex     than that provided by additionals. In this case, it's possible to     define methods of the form ``_if_%(name)s`` where ``name`` is the     name of a boolean field. If the field is selected, then the     corresponding module will be marked for installation *and* the     hook method will be executed.      Hook methods take the usual set of parameters (cr, uid, ids,     context) and can return a collection of additional addons to     install (if they return anything, otherwise they should not return     anything, though returning any ""falsy"" value such as None or an     empty collection will have the same effect).      Complete control     ----------------      The last hook is to simply overload the ``modules_to_install``     method, which implements all the mechanisms above. This method     takes the usual set of parameters (cr, uid, ids, context) and     returns a ``set`` of addons to install (addons selected by the     above methods minus addons from the *basic* set which are already     installed) [#]_ so an overloader can simply manipulate the ``set``     returned by ``ResConfigInstaller.modules_to_install`` to add or     remove addons.      Skipping the installer     ----------------------      Unless it is removed from the view, installers have a *skip*     button which invokes ``action_skip`` (and the ``cancel`` hook from     ``res.config``). Hooks and additionals *are not run* when skipping     installation, even for already installed addons.      Again, setup your hooks accordingly.      .. [#] note that since a mapping key needs to be hashable, it's            possible to use a tuple or a frozenset, but not a list or a            regular set      .. [#] because the already-installed modules are only pruned at            the very end of ``modules_to_install``, additionals and            hooks depending on them *are guaranteed to execute*. Setup            your hooks accordingly.     "|
0|res.config|Config| Base classes for new-style configuration items      Configuration items should inherit from this class, implement     the execute method (and optionally the cancel one) and have     their view inherit from the related res_config_view_base view.     |
0|base.document.layout|Company Document Layout|     Customise the company document layout and display a live preview     |
0|bus.bus|Communication Bus| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.abstract.workorder|Common code between produce wizards and workorders.| The base model, which is implicitly inherited by all models. |
0|account.common.journal.report|Common Journal Report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.coa.report|Chart of Account Report| The base model, which is implicitly inherited by all models. |
0|slide.channel.tag|Channel/Course tags| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mail.moderation|Channel black/white list| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|slide.channel.invite|Channel Invitation Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.change.standard.price|Change Standard Price| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|change.production.qty|Change Production Qty| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|stock.change.product.qty|Change Product Quantity| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|change.password.wizard|Change Password Wizard| A wizard to manage the change of users' passwords. |
0|account.change.lock.date|Change Lock Date|     This wizard is used to change the lock date     |
0|account.cashbox.line|CashBox Line| Cash Box Details |
0|account.cash.flow.report|Cash Flow Report| The base model, which is implicitly inherited by all models. |
0|cash.box.out|Cash Box Out| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|mail.shortcode|Canned Response / Shortcode| Shortcode         Canned Responses, allowing the user to defined shortcuts in its message. Should be applied before storing message in database.         Emoji allowing replacing text with image for visual effect. Should be applied when the message is displayed (only for final rendering).         These shortcodes are global and are available for every user.     |
0|calendar.contacts|Calendar Contacts| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|crm.activity.report|CRM Activity Analysis| CRM Lead Analysis |
0|mrp.bom.byproduct|Byproduct| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rules_engine.assignment_line|Bulk Assignment Wizard Line| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.assign_wizzard|Bulk Asignment Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|rules_engine.breakout_segment|Breakout Wizard Segment| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|board.board|Board| The base model, which is implicitly inherited by all models. |
0|hr.employee.base|Basic Employee| The base model, which is implicitly inherited by all models. |
0|base_import.import|Base Import| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|base|Base| The base model, which is implicitly inherited by all models. |
0|barcodes.barcode_events_mixin|Barcode Event Mixin|" Mixin class for objects reacting when a barcode is scanned in their form views         which contains `<field name=""_barcode_scanned"" widget=""barcode_handler""/>`.         Models using this mixin must implement the method on_barcode_scanned. It works         like an onchange and receives the scanned barcode in parameter.     "|
0|account.setup.bank.manual.config|Bank setup manual config| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.bank.statement.closebalance|Bank Statement Closing Balance|     Account Bank Statement wizard that check that closing balance is correct.     |
0|account.bank.statement.cashbox|Bank Statement Cashbox|     Account Bank Statement popup that allows entering cash details.     |
0|account.bank.reconciliation.report|Bank Reconciliation Report| The base model, which is implicitly inherited by all models. |
0|stock.backorder.confirmation|Backorder Confirmation| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|report.mrp.report_bom_structure|BOM Structure Report| The base model, which is implicitly inherited by all models. |
0|ir.autovacuum|Automatic Vacuum| Expose the vacuum method to the cron jobs mechanism. |
0|base.automation.lead.test|Automated Rule Test| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|base.automation.line.test|Automated Rule Line Test| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|stock.picking.responsible|Assign Responsible| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|web_editor.assets|Assets Utils| The base model, which is implicitly inherited by all models. |
0|approval.approver|Approver| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|slide.answer|Answer for a slide question| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.analytic.default|Analytic Distribution| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.tax.configuration.ept|Amazon Tax Configuration| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|res.config.amazon.seller|Amazon Seller Configurations| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.queue.process.wizard.ept|Amazon Queue Process Wizard Ept| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.outbound.order.wizard|Amazon Outbound Order Wizard| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|res.config.amazon.marketplace|Amazon Marketplace Configurations| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|amazon.process.import.export|Amazon Import Export Process| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|global.cron.configuration|Amazon Global Cron Configuration| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|fbm.cron.configuration|Amazon FBM Cron Configuration| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|fba.cron.configuration|Amazon FBA Cron Configuration| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|website.route|All Website Route| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.aged.receivable|Aged Receivable| The base model, which is implicitly inherited by all models. |
0|account.aged.payable|Aged Payable| The base model, which is implicitly inherited by all models. |
0|account.aged.partner|Aged Partner Balances| The base model, which is implicitly inherited by all models. |
0|report.account.report_agedpartnerbalance|Aged Partner Balance Report| The base model, which is implicitly inherited by all models. |
0|format.address.mixin|Address Format| The base model, which is implicitly inherited by all models. |
0|prorata.read_group.mixin|Adapt model with date_from/date_to for pro-rata temporis read_group| The base model, which is implicitly inherited by all models. |
0|mail.activity.mixin|Activity Mixin|" Mail Activity Mixin is a mixin class to use if you want to add activities     management on a model. It works like the mail.thread mixin. It defines     an activity_ids one2many field toward activities using res_id and res_model_id.     Various related / computed fields are also added to have a global status of     activities on documents.      Activities come with a new JS widget for the form view. It is integrated in the     Chatter widget although it is a separate widget. It displays activities linked     to the current record and allow to schedule, edit and mark done activities.     Use widget=""mail_activity"" on activity_ids field in form view to use it.      There is also a kanban widget defined. It defines a small widget to integrate     in kanban vignettes. It allow to manage activities directly from the kanban     view. Use widget=""kanban_activity"" on activitiy_ids field in kanban view to     use it.      Some context keys allow to control the mixin behavior. Use those in some     specific cases like import       * ``mail_activity_automation_skip``: skip activities automation; it means        no automated activities will be generated, updated or unlinked, allowing        to save computation and avoid generating unwanted activities;     "|
0|account.fiscal.position.account|Accounts Mapping of Fiscal Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.fiscal.position.account.template|Accounts Mapping Template of Fiscal Position| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|report.account.report_invoice_with_payments|Account report with payment lines| The base model, which is implicitly inherited by all models. |
0|account.unreconcile|Account Unreconcile| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.transfer.model.line|Account Transfer Model Line| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.transfer.model|Account Transfer Model| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.report.footnote|Account Report Footnote| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.report|Account Report| The base model, which is implicitly inherited by all models. |
0|account.reconciliation.widget|Account Reconciliation widget| The base model, which is implicitly inherited by all models. |
0|account.print.journal|Account Print Journal| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.move.reversal|Account Move Reversal|     Account move reversal wizard, it cancel an account move by reversing it.     |
0|report.account.report_journal|Account Journal Report| The base model, which is implicitly inherited by all models. |
0|account.journal.group|Account Journal Group| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.invoice.send|Account Invoice Send| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.common.report|Account Common Report| Model super-class for transient records, meant to be temporarily     persistent, and regularly vacuum-cleaned.      A TransientModel has a simplified access rights management, all users can     create new records, and may only access the records they created. The     superuser has unrestricted access to all TransientModel records.     |
0|account.cash.rounding|Account Cash Rounding|     In some countries, we need to be able to make appear on an invoice a rounding line, appearing there only because the     smallest coinage has been removed from the circulation. For example, in Switzerland invoices have to be rounded to     0.05 CHF because coins of 0.01 CHF and 0.02 CHF aren't used anymore.     see https://en.wikipedia.org/wiki/Cash_rounding for more details.     |
0|account.assets.report|Account Assets Report| The base model, which is implicitly inherited by all models. |
0|account.analytic.report|Account Analytic Report| The base model, which is implicitly inherited by all models. |
0|mrp.abstract.workorder.line|Abstract model to implement product_produce_line as well as    workorder_line| The base model, which is implicitly inherited by all models. |
0|report.report_xlsx.abstract|Abstract XLSX Report| The base model, which is implicitly inherited by all models. |
0|feed.submission.history|feed.submission.history| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.workorder|Work Order| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.unbuild|Unbuild Order| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.stock.adjustment.report.history|Stock Adjustment Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|shipping.report.request.history|Shipping Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|settlement.report.ept|Settlement Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|stock.scrap|Scrap| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.removal.order.report.history|Removal Order Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.removal.order.ept|Removal Order| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|rating.report.history|Rating Report History| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|purchase.requisition|Purchase Requisition| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|account.online.provider|Provider for online account synchronization| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mrp.production|Production Order| Manufacturing Orders |
0|mail.thread.phone|Phone Blacklist Mixin| Purpose of this mixin is to offer two services        * compute a sanitized phone number based on ´´_sms_get_number_fields´´.         It takes first sanitized value, trying each field returned by the         method (see ``MailThread._sms_get_number_fields()´´ for more details         about the usage of this method);       * compute blacklist state of records. It is based on phone.blacklist         model and give an easy-to-use field and API to manipulate blacklisted         records;      Main API methods        * ``_phone_set_blacklisted``: set recordset as blacklisted;       * ``_phone_reset_blacklisted``: reactivate recordset (even if not blacklisted         this method can be called safely);     |
0|phone.blacklist|Phone Blacklist| Blacklist of phone numbers. Used to avoid sending unwanted messages to people. |
0|mailing.mailing|Mass Mailing| MassMailing models a wave of emails for a mass mailign campaign.     A mass mailing is an occurence of sending emails. |
0|mailing.contact|Mailing Contact|Model of a contact. This model is different from the partner model     because it holds only some basic information: name, email. The purpose is to     be able to deal with large contact list to email without bloating the partner     base.|
0|mail.thread.blacklist|Mail Blacklist mixin| Mixin that is inherited by all model with opt out. This mixin inherits from     mail.address.mixin which defines the _primary_email variable and the email_normalized     field that are mandatory to use the blacklist mixin. Mail Thread capabilities     are required for this mixin. |
0|mail.blacklist|Mail Blacklist| Model of blacklisted email addresses to stop sending emails.|
0|mis.budget.by.account|MIS Budget by Account| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mis.budget.abstract|MIS Budget (Abstract Base Class)| Update MailThread to add the support of bounce management in mass mailing traces. |
0|inbound.shipment.plan.ept|Inbound Shipment Plan| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.inbound.shipment.ept|Inbound Shipment| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|mail.thread|Email Thread| Update MailThread to add the support of bounce management in mass mailing traces. |
0|mail.thread.cc|Email CC management| Update MailThread to add the support of bounce management in mass mailing traces. |
0|sale.order.return.report|Customer Return Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|approval.request|Approval Request| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.vcs.tax.report.ept|Amazon VCS Tax Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|amazon.fba.live.stock.report.ept|Amazon Live Stock Report| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
0|active.product.listing.report.ept|Active Product| Main super-class for regular database-persisted Odoo models.      Odoo models are created by inheriting from this class::          class user(Model):             ...      The system will later instantiate the class once per database (on     which the class' module is installed).     |
